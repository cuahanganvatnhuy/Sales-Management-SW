// Script t·∫°o t√†i kho·∫£n admin ch√≠nh
// Ch·∫°y script n√†y m·ªôt l·∫ßn ƒë·ªÉ t·∫°o t√†i kho·∫£n admin ƒë·∫ßu ti√™n

// Simple password hashing function (trong production n√™n d√πng bcrypt)
function simpleHash(password) {
    let hash = 0;
    for (let i = 0; i < password.length; i++) {
        const char = password.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32-bit integer
    }
    return Math.abs(hash).toString(16);
}

// T·∫°o t√†i kho·∫£n admin ch√≠nh
async function createMainAdminAccount() {
    if (!window.database) {
        console.error('Firebase database not initialized');
        return;
    }

    const adminData = {
        username: 'phuc999979',
        email: 'admin@salesmanagement.com',
        passwordHash: simpleHash('phuc999979'), // Hash m·∫≠t kh·∫©u
        fullName: 'Super Administrator',
        role: 'super_admin',
        permissions: ['*'], // To√†n quy·ªÅn
        storeAccess: ['*'], // Truy c·∫≠p t·∫•t c·∫£ c·ª≠a h√†ng
        isActive: true,
        createdAt: new Date().toISOString(),
        createdBy: 'system',
        lastLogin: null,
        loginCount: 0
    };

    try {
        // T·∫°o user v·ªõi ID c·ªë ƒë·ªãnh ƒë·ªÉ d·ªÖ qu·∫£n l√Ω
        const userId = 'admin_phuc999979';
        
        // Ki·ªÉm tra xem t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await window.database.ref(`users/${userId}`).once('value');
        
        if (existingUser.exists()) {
            console.log('‚úÖ T√†i kho·∫£n admin ƒë√£ t·ªìn t·∫°i:', adminData.username);
            return userId;
        }

        // T·∫°o t√†i kho·∫£n m·ªõi
        await window.database.ref(`users/${userId}`).set(adminData);
        
        
        return userId;
        
    } catch (error) {
        console.error('‚ùå L·ªói t·∫°o t√†i kho·∫£n admin:', error);
        throw error;
    }
}

// T·∫°o c·∫•u tr√∫c roles v√† permissions
async function createRolesAndPermissions() {
    if (!window.database) {
        console.error('Firebase database not initialized');
        return;
    }

    const roles = {
        super_admin: {
            name: 'Super Administrator',
            description: 'To√†n quy·ªÅn h·ªá th·ªëng',
            permissions: ['*'],
            level: 100
        },
        admin: {
            name: 'Administrator', 
            description: 'Qu·∫£n tr·ªã vi√™n',
            permissions: [
                'users.manage',
                'stores.manage', 
                'orders.manage',
                'products.manage',
                'reports.view',
                'settings.manage'
            ],
            level: 90
        },
        manager: {
            name: 'Manager',
            description: 'Qu·∫£n l√Ω c·ª≠a h√†ng',
            permissions: [
                'orders.view',
                'orders.create',
                'orders.edit',
                'products.view',
                'products.edit',
                'reports.view'
            ],
            level: 50
        },
        staff: {
            name: 'Staff',
            description: 'Nh√¢n vi√™n',
            permissions: [
                'orders.view',
                'orders.create',
                'products.view'
            ],
            level: 10
        }
    };

    const permissions = {
        'users.manage': 'Qu·∫£n l√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng',
        'stores.manage': 'Qu·∫£n l√Ω c·ª≠a h√†ng',
        'orders.view': 'Xem ƒë∆°n h√†ng',
        'orders.create': 'T·∫°o ƒë∆°n h√†ng',
        'orders.edit': 'S·ª≠a ƒë∆°n h√†ng',
        'orders.delete': 'X√≥a ƒë∆°n h√†ng',
        'orders.manage': 'Qu·∫£n l√Ω ƒë∆°n h√†ng (full)',
        'products.view': 'Xem s·∫£n ph·∫©m',
        'products.edit': 'S·ª≠a s·∫£n ph·∫©m',
        'products.delete': 'X√≥a s·∫£n ph·∫©m',
        'products.manage': 'Qu·∫£n l√Ω s·∫£n ph·∫©m (full)',
        'reports.view': 'Xem b√°o c√°o',
        'settings.manage': 'Qu·∫£n l√Ω c√†i ƒë·∫∑t h·ªá th·ªëng'
    };

    try {
        await window.database.ref('roles').set(roles);
        await window.database.ref('permissions').set(permissions);
        
        console.log('‚úÖ T·∫°o roles v√† permissions th√†nh c√¥ng!');
        
    } catch (error) {
        console.error('‚ùå L·ªói t·∫°o roles v√† permissions:', error);
        throw error;
    }
}

// H√†m ch√≠nh ƒë·ªÉ kh·ªüi t·∫°o h·ªá th·ªëng
async function initializeAuthSystem() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o h·ªá th·ªëng authentication...');
    
    try {
        // ƒê·ª£i Firebase s·∫µn s√†ng
        if (!window.database) {
            console.log('‚è≥ ƒêang ch·ªù Firebase kh·ªüi t·∫°o...');
            await new Promise(resolve => {
                const checkFirebase = () => {
                    if (window.database) {
                        resolve();
                    } else {
                        setTimeout(checkFirebase, 100);
                    }
                };
                checkFirebase();
            });
        }

        // T·∫°o roles v√† permissions tr∆∞·ªõc
        await createRolesAndPermissions();
        
        // T·∫°o t√†i kho·∫£n admin
        const adminId = await createMainAdminAccount();
        
      
        
        return adminId;
        
    } catch (error) {
        console.error('‚ùå L·ªói kh·ªüi t·∫°o h·ªá th·ªëng:', error);
    }
}

// Export functions ƒë·ªÉ c√≥ th·ªÉ g·ªçi t·ª´ console
window.createMainAdminAccount = createMainAdminAccount;
window.createRolesAndPermissions = createRolesAndPermissions;
window.initializeAuthSystem = initializeAuthSystem;

console.log('üîß Admin Account Creator loaded');
console.log('Available functions: createMainAdminAccount(), initializeAuthSystem()');
